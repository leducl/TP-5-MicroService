3.1 Pourquoi faire des petits services ?
Pourquoi voudrait-on diviser un gros service web en plusieurs morceaux plus petits ?
→ Pour plus de modularité, de maintenance et de réutilisabilité / stabilité.

Imaginez que vous travaillez sur un gros projet. Que se passe-t-il si vous devez modifier une seule fonctionnalité ? Est-ce facile ? Risqué ?
→ C’est risqué et compliqué, car les composants sont souvent fortement couplés : un changement peut entraîner des effets de bord inattendus ailleurs

Peut-on confier un petit service à une autre équipe ou un autre développeur sans qu’il ait besoin de connaître tout le reste ?
→ Oui, s’il est bien isolé et documenté.

Que se passe-t-il si une partie tombe en panne ? Peut-on réparer sans tout redémarrer ?
→ Oui, on peut réparer un service sans impacter les autres.

Avez-vous déjà vu ou utilisé un site ou une appli qui semblait “modulaire” ?
→ Oui, par exemple Gmail, Netflix.

3.2 Comment découper un service ?
Sur quels critères peut-on séparer un gros service en plusieurs petits ?
→ Les services ne doivent pas être fortement liés. Ils doivent pouvoir évoluer, être déployés ou réparés indépendamment. Tout ce qui est dans un service doit être cohérent et lié fonctionnellement. De plus chaque microservice doit gérer une fonctionnalité unique

Faut-il découper par fonctionnalité (ex : blague, météo, cantine…) ? Par type de donnée ? Par public cible ?
→ Cela dépend du contexte, mais souvent par fonctionnalité.

À partir de combien de lignes de code ou de routes HTTP faut-il envisager un découpage ?
→ Il n’y a pas de seuil fixe, mais dès que la complexité augmente.

Le découpage doit-il être figé ou peut-il évoluer ?
→ Il doit pouvoir évoluer selon les besoins.
